# Default values for pchclient.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

environment: dev
namespace: pchclient-dev
project: pchclient

pchClientUI:
  appName: pchclient-ui
  replicaCount: 1

  image:
    repository: k3d-codebgp-registry:44257/pchclientui
    pullPolicy: IfNotPresent
    tag: "local"

  service:
    type: ClusterIP
    port: 80

  resources:
    limits:
      cpu: 500m
      memory: 768Mi
    requests:
      cpu: 50m
      memory: 256Mi  

pchClientParser:
  appName: pchclient-parser
  replicaCount: 1

  image:
    repository: k3d-codebgp-registry:44257/pchclientparser
    pullPolicy: IfNotPresent
    tag: "local"
  
  conf:
    hasura_graphql_enable_console: "true"
    hasura_graphql_dev_mode: "true"
    hasura_graphql_enabled_log_types: startup, http-log, webhook-log, websocket-log, query-log
    hasura_graphql_server_port: "8080"
    hasura_graphql_cors_domain: "*"
    hasura_graphql_migrations_server_timeout: "300"

  resources:
    limits:
      cpu: 500m
      memory: 768Mi
    requests:
      cpu: 50m
      memory: 256Mi

graphql:
  appName: graphql
  replicaCount: 1

  service:
    type: ClusterIP
    port: 8080

  image:
    repository: hasura/graphql-engine
    pullPolicy: IfNotPresent
    tag: "v1.3.3.cli-migrations"

  resources:
    limits:
      cpu: 500m
      memory: 768Mi
    requests:
      cpu: 50m
      memory: 256Mi

ingress:
  enabled: true
  className: ""
  annotations: 
    ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    pchClientUI:
      host: pchclientui.local
      path: /
      pathType: Prefix
    graphql:
      host: hasura.local
      path: /
      pathType: Prefix

secrets:
  postgres_db: aW9hbm5pc2Ri
  postgres_user: aW9hbm5pcw==
  postgres_password: aW9hbm5pc3NlY3JldA==
  postgres_port: NTQzMg==
  postgres_host: cGNoY2xpZW50LXBvc3RncmVzcWwtaGEtcGdwb29s
  hasura_graphql_database_url: cG9zdGdyZXM6Ly9pb2FubmlzOmlvYW5uaXNzZWNyZXRAcGNoY2xpZW50LXBvc3RncmVzcWwtaGEtcGdwb29sOjU0MzIvaW9hbm5pc2Ri
  # hasura_graphql_database_url: cG9zdGdyZXM6Ly9oYXN1cmF1c2VyOmdtc3RwbHhyb25pQHBjaGNsaWVudC1wb3N0Z3Jlc3FsLWhhLXBncG9vbDo1NDMyL2lvYW5uaXNkYg==
  # hasura_graphql_database_url: cG9zdGdyZXM6Ly9hZG1pbjphc3RhbmFwYW5lQHBjaGNsaWVudC1wb3N0Z3Jlc3FsLWhhLXBncG9vbDo1NDMyL2lvYW5uaXNkYg==
  

# subchart start
postgresql-ha:
  global:
    postgresql:
      username: ioannis
      password: ioannissecret
      database: ioannisdb
      repmgrUsername: repmgr
      repmgrPassword: astalavista
    pgpool:
      adminUsername: admin
      adminPassword: astanapane
      
  pgpool:
    # customUsers: 
    #   - usernames: admin
    #     passwords: astanapane
    # usernames: admin
    # passwords: astanapane
    # customUsersSecret: "postgress-secret-basic-auth"

  postgresql:
    # username: ioannis
    # password: ioannissecret
    # database: ioannisdb
    # repmgrPassword: astalavista

    extendedConf: |-
      volumePermissions.enabled = true

    initdbScripts:
      my_init_script.sql: |
        # -- create the schemas required by the hasura system
        # -- NOTE: If you are starting from scratch: drop the below schemas first, if they exist.
        CREATE SCHEMA IF NOT EXISTS hdb_catalog;

        # -- make the user an owner of system schemas
        ALTER SCHEMA hdb_catalog OWNER TO ioannis;

        # -- grant select permissions on information_schema and pg_catalog. This is
        # -- required for hasura to query the list of available tables.
        # -- NOTE: these permissions are usually available by default to all users via PUBLIC grant
        GRANT SELECT ON ALL TABLES IN SCHEMA information_schema TO ioannis;
        GRANT SELECT ON ALL TABLES IN SCHEMA pg_catalog TO ioannis;

        # -- create pgcrypto extension, required for UUID
        CREATE EXTENSION IF NOT EXISTS pgcrypto;

        # -- grant all privileges on all tables in the public schema. This can be customised:
        # -- For example, if you only want to use GraphQL regular queries and not mutations,
        # -- then you can set: GRANT SELECT ON ALL TABLES...
        GRANT USAGE ON SCHEMA public TO ioannis;
        GRANT ALL ON ALL TABLES IN SCHEMA public TO ioannis;
        GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO ioannis;
        GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO ioannis;

        create table IXP_SERVER_DATA(
          IXP VARCHAR(255),
          COUNTRY VARCHAR(64),
          CITY VARCHAR(64),
          PROTOCOL VARCHAR(4),
          RS_LOCAL_ASN INTEGER,
          NUMBER_OF_RIB_ENTRIES INTEGER,
          NUMBER_OF_PEERS INTEGER,
          TOTAL_NUMBER_OF_NEIGHBORS INTEGER,
          UPDATED_AT TIMESTAMP WITH TIME ZONE,
          PRIMARY KEY (IXP, COUNTRY, CITY, PROTOCOL)
        );

        # -- Similarly add these for other schemas as well, if you have any.
        GRANT USAGE ON SCHEMA ioannisdb TO ioannis;
        GRANT ALL ON ALL TABLES IN SCHEMA ioannisdb TO ioannis;
        GRANT ALL ON ALL SEQUENCES IN SCHEMA ioannisdb TO ioannis;
        GRANT ALL ON ALL FUNCTIONS IN SCHEMA ioannisdb TO ioannis;

        # ALTER USER ioannis with superuser;

        
        
        


