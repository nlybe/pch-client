apiVersion: k3d.io/v1alpha2 # this will change in the future as we make everything more stable
kind: Simple # internally, we also have a Cluster config, which is not yet available externally
name: codebgp # name that you want to give to your cluster (will still be prefixed with `k3d-`)
servers: 1 # same as `--servers 1`
agents: 2 # same as `--agents 2`
# kubeAPI: # same as `--api-port myhost.my.domain:6445` (where the name would resolve to 127.0.0.1)
#   host: "local.codebgp" # important for the `server` setting in the kubeconfig
#   hostIP: "127.0.0.1" # where the Kubernetes API will be listening on
#   hostPort: "6445" # where the Kubernetes API listening port will be mapped to on your host system
image: rancher/k3s:v1.21.3-k3s1 # same as `--image rancher/k3s:v1.20.4-k3s1`
network: codebgp-net # same as `--network my-custom-net`
token: superSecretToken # same as `--token superSecretToken`
volumes: # repeatable flags are represented as YAML lists
  - volume: /home/nikos/data/projects/devops/codeBGP/data:/etc/codebgp/data
    nodeFilters:
      - server[0]
      - agent[*]
  - volume: /dev/mapper:/dev/mapper
    nodeFilters:
      - server[0]
      - agent[*]
ports:  # same as `--port '8080:80@loadbalancer'`
  - port: 8080:80 # pchclientui
    nodeFilters:
      - loadbalancer
labels:
  - label: role=worker # same as `--label 'foo=bar@agent[1]'`
    nodeFilters:
      - agent[*]
# env:
#   - envVar: bar=baz # same as `--env 'bar=baz@server[0]'`
#     nodeFilters:
#       - server[0]
registries: # define how registries should be created or used
  create: false # creates a default registry to be used with the cluster; same as `--registry-create`
  # use:
  #   - k3d-myotherregistry:5000 # some other k3d-managed registry; same as `--registry-use 'k3d-myotherregistry:5000'`
  config: | # define contents of the `registries.yaml` file (or reference a file); same as `--registry-config /path/to/config.yaml`
    mirrors:
      "registry-1.docker.io":
        endpoint:
          - https://registry-1.docker.io
options:
  k3d: # k3d runtime settings
    wait: true # wait for cluster to be usable before returining; same as `--wait` (default: true)
    timeout: "60s" # wait timeout before aborting; same as `--timeout 60s`
    disableLoadbalancer: false # same as `--no-lb`
    disableImageVolume: false # same as `--no-image-volume`
    disableRollback: false # same as `--no-Rollback`
    disableHostIPInjection: false # same as `--no-hostip`
  # k3s: # options passed on to K3s itself
  #   extraServerArgs: # additional arguments passed to the `k3s server` command; same as `--k3s-server-arg`
  #   - --no-deploy=traefik
  #     - --tls-san=my.host.domain
  #   extraAgentArgs: [] # addditional arguments passed to the `k3s agent` command; same as `--k3s-agent-arg`
  kubeconfig:
    updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
    switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
  # runtime: # runtime (docker) specific options
  #   gpuRequest: all # same as `--gpus all`



