{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["MONITOR_DATA_SUBSCRIPTION","gql","App","useSubscription","loading","error","data","className","ixp_server_data","map","ixp","city","country","protocol","number_of_peers","number_of_rib_entries","rs_local_asn","total_number_of_neighbors","updated_at","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","wsLink","WebSocketLink","uri","options","reconnect","httpLink","HttpLink","client","ApolloClient","link","ApolloLink","from","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAAe,I,oBCITA,EAA4BC,cAAH,uSA2DhBC,MA3Cf,WAAgB,IAAD,EACoBC,0BAAgBH,GAAzCI,EADK,EACLA,QAASC,EADJ,EACIA,MAAOC,EADX,EACWA,KACxB,OAAIF,EAAgB,2CAChBC,EAAc,yCAGhB,qBAAKE,UAAU,MAAf,SACE,kCACE,gCACE,+BACE,qCACA,sCACA,yCACA,0CACA,iDACA,uDACA,2CACA,qDACA,8CAGJ,gCAEAD,EAAKE,gBAAgBC,KAAI,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,gBAAiBC,EAAlD,EAAkDA,sBAAuBC,EAAzE,EAAyEA,aAAcC,EAAvF,EAAuFA,0BAA2BC,EAAlH,EAAkHA,WAAlH,OACzB,+BACE,6BAAKR,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,IACL,6BAAKC,MATER,cChCFS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCERQ,G,KAAS,I,MAAIC,GAAc,CAC/BC,IAAK,iCACLC,QAAS,CACPC,WAAW,MAITC,EAAW,IAAIC,WAAS,CAC5BJ,IAAK,qCAGDK,EAAS,IAAIC,eAAa,CAC9BC,KAAMC,aAAWC,KAAK,CACpBX,EACAK,IAEFO,MAAO,IAAIC,kBAIbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,iBAAD,CAAgBT,OAAQA,EAAxB,SAAgC,cAAC,EAAD,QAElCU,SAASC,eAAe,SAM1B3B,M","file":"static/js/main.c5205293.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { useQuery, useSubscription, gql } from '@apollo/client';\n\nconst MONITOR_DATA_SUBSCRIPTION = gql`\n  subscription MySubscription {\n    ixp_server_data(order_by: {ixp: asc}) {\n      ixp\n      city\n      country\n      protocol\n      number_of_peers\n      number_of_rib_entries\n      rs_local_asn\n      total_number_of_neighbors\n      updated_at\n    }\n  }\n`\n\nfunction App() {\n  const { loading, error, data } = useSubscription(MONITOR_DATA_SUBSCRIPTION);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <div className=\"App\">\n      <table>\n        <thead>\n          <tr>\n            <th>IXP</th>\n            <th>City</th>\n            <th>Country</th>\n            <th>Protocol</th>\n            <th>Number of peers</th>\n            <th>Number of RIB entries</th>\n            <th>Local ASN</th>\n            <th>Number of Neighbors</th>\n            <th>Updated</th>\n          </tr>\n        </thead>\n        <tbody>\n      {\n        data.ixp_server_data.map(({ ixp, city, country, protocol, number_of_peers, number_of_rib_entries, rs_local_asn, total_number_of_neighbors, updated_at }) => (\n        <tr key={ixp}>\n          <td>{ixp}</td>\n          <td>{city}</td>\n          <td>{country}</td>\n          <td>{protocol}</td>\n          <td>{number_of_peers}</td>\n          <td>{number_of_rib_entries}</td>\n          <td>{rs_local_asn}</td>\n          <td>{total_number_of_neighbors}</td>\n          <td>{updated_at}</td>\n        </tr>\n        ))\n      }\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider, split, HttpLink, ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nconst wsLink = new WebSocketLink({\n  uri: 'ws://hasura.local:8080/v1/graphql',\n  options: {\n    reconnect: true\n  }\n});\n\nconst httpLink = new HttpLink({\n  uri: 'http://hasura.local:8080/v1/graphql'\n});\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    wsLink,\n    httpLink\n  ]),\n  cache: new InMemoryCache()\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}><App /></ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}